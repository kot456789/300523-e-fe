==== урок 05.03.24

1. Создать NavMenu (Main, Categories), MainPage, CategoriesPage
2. Настроить роутинг - при клике на Main, Categories перебрасывает на соответствующие страницы
3. Стилизовать NavMenu
4. Создать store (скачать библ-ку: npm i redux react-redux) и подключить его к приложению в src/index.js (заворачиваем в Provider)
5. Создать categoriesReducer (в store создать reducers) и поместить его в rootReducer (в store/index.js)
6. Создать loadCategoriesAction и прописать для него логику в categoriesReducer
7. Создать CategoriesContainer и CategoryCard в components)
8. Импортировать CategoriesContainer в CategoriesPage)
9. Установить redux-thunk: npm i redux-thunk. Подключить middleware (фу-я происходит междум 2-мя функциями) к store
10. Написать функцию getCategories()  (в requests/categories.js), которая отправляет запрос по ссылке https://fakestoreapi.com/products/categories и полученные данные записывает в состояние categories. Эту функцию будем вызывать в CartItemsContainer/index.js) , создаём dispatch
11. Отрисовать карточки категорий из categoriesData. 
12. Стилизовать карточки категорий и контейнер
13. Создать ProductsByCategoryPage и подключить к роутингу (/products/:category)
14. При клике на карточку категории перебрасывать на соответствующий роут
15. Создать productsByCategoryReducer и поместить его в rootReducer

====== урок 07.03.24

16. Написать loadProductsByCategoryAction и прописать логику в productsByCategoryReducer
17. Написать функцию getProductsByCategory(), которая отправляет запрос и полученные данные записывать в state
18. Проверить в консоли состояние
19. Из полученных данных отрисовать карточки (image, title, price)товаров.
20. Стилизовать карточки и контейнер (грид)

21. Создать SingleProductPage и включить в роутинг (/product/:id)
22. При клике на карточку товара перебрасывает на SingleProductPage и в роут подставляется айди товара
23. Создать singleProductReducer и поместить его в rootReducer
24. Создать loadSingleProductAction и прописать его логику в singleProductReducer
25. Написать функцию getSingleProduct, которая отправляет запрос по ссылке https://fakestoreapi.com/products/:id и передает полученные данные в singleProductReducer 
26. Вызвать функцию getSingleProduct на странице SingleProductPage
27. В консоли проверить записался ли ответ по запросу в состояние

 ==== урок 12.03.24

28. Создать CartPage  , в pages). Подключить к роутингу (/cart)     ,в App.js).
29. В NavMenu добавить пункт Cart ((ещё 1 link с Cart)), при клике на который перебрасывает на CartPage.

30.0.  Продукты помещаем в корзину(корзина это отдельное состояние)
30. Создать cartReducer в reducers) и поместить его в rootReducer в store/index.js)

31. Добавить кнопку Add to cart в двух местах - ProductCard) и SingleProductPage)

32. Создать addToCartAction и прописать логику addToCartAction в cartReducer)

33. Создать CartItem и CartItemsContainer в components)
34. CartItemsContainer поместить в CartPage)

35. На странице SingleProductPage при клике на кнопку 'Add to cart' вызывать функцию addToCartAction
36. В CartItemsContainer достать из store (через useSelector) состояние cart и отрисовывать из него карточки (CartItem) - image, title, price, count (-+)

37. Написать deleteCartItemAction (используем payload:id)), прописать логику в cartReducer
38. При клике на крестик в CartItem вызывать deleteCartItemAction

39. Реализовать incrCountAction, прописать логику в cartReducer, вызывать при клике на +
40. Реализовать decrCountAction, прописать логику в cartReducer, вызывать при клике на -
41. Если корзина пустая выводить сообщение 'Cart is empty'
42. На странице CartPage добавить параграф Total: sum (стоимость всех товаров в корзине)
43. На странице CartPage добавить кнопку(button), при клике на которую корзина очищается:
  - в cartReducer создать clearCartAction
  -  прописать логику экшена
  - вызвать clearCartAction при клике на кнопку


payload-это входящие в фукцию данные